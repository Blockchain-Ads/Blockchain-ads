import {BaseAuth} from "./BaseAuth.js";
export class Application {
    /**
     * Create a Vulos Application
     * @param config {{id: string, secret: string, scope: string, redirectUrls: string[], postLogoutRedirectUrls?: string[], responseTypes?: string[]}}
     */
    constructor(config) {
        if (!config) {
            throw new TypeError("Invalid parameter 'config'")
        }
        if (!config.id || config.id === "") {
            throw new TypeError("Invalid ID")
        }
        if (config.secret && config.secret === "") {
            throw new TypeError("Invalid secret")
        }
        if (!config.scope || config.scope === "") {
            throw new TypeError("Invalid scope")
        }
        if (!config.redirectUrls || config.redirectUrls.length === 0) {
            throw new TypeError("Invalid redirect URLs")
        }

        if (!config.responseTypes) {
            if (config.secret) {
                config.responseTypes = ['code']
            } else {
                config.responseTypes = ['token id_token']
            }
        }

        if (!config.postLogoutRedirectUrls) {
            config.postLogoutRedirectUrls = []
        }
        this.id = config.id
        this.postLogoutRedirectUrls = config.postLogoutRedirectUrls
        this.redirectUrls = config.redirectUrls
        this.secret = config.secret
        this.scope = config.scope
        this.responseTypes = config.responseTypes
    }

    /**
     * @param authApi {Function}
     * @param endpoint {string?}
     * @returns {BaseAuth}
     */
    createAuth(authApi, endpoint) {
        return new authApi(this, endpoint)
    }
}
