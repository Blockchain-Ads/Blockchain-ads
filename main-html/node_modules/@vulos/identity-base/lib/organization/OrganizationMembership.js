import {OrganizationApi} from "./OrganizationApi.js";
import {OrganizationRole} from "./OrganizationRole.js";
import {Organization} from "./Organization.js";
import {UserReference} from "../profile/UserReference.js";

export class OrganizationMembership {
    /**
     * An object that contains information about the user's relationship with an Organization
     * @param api {OrganizationApi}
     * @param membership {{ organizationId: number, membershipId: string, userId: string }}
     */
    constructor(api, membership) {
        this.api = api
        this.profileApi = api.user.profileApi
        this.organizationId = membership.organizationId
        this.membershipId = membership.membershipId
        this.userId = membership.userId
    }

    /**
     * Get a reference to the membership's user
     * @return {UserReference}
     */
    reference() {
        return new UserReference(this.userId, this.profileApi)
    }

    /**
     * Get this membership's organization profile
     * @return {Promise<{name: string, address?: string, city?: string, country?: string, state?: string, website?: string, verified?: boolean, uniqueId?: string, zipCode?: string}|false>}
     */
    async organizationProfile() {
        try {
            return await this.profileApi.organization(this.organizationId)
        } catch {
            return false
        }
    }

    /**
     * Add a new role to the user
     * @param name {string}
     * @returns {Promise<OrganizationRole|false>}
     */
    async addRole(name) {
        try {
            return new OrganizationRole(this.api, this, await this.api.roleCreate(this.organizationId, this.membershipId, name))
        } catch {
            return false
        }
    }

    /**
     * Get all the roles for this membership
     * @returns {Promise<boolean|OrganizationRole[]>}
     */
    async getRoles() {
        try {
            const roleObjects = []
            for (const role of await this.api.roleList(this.organizationId, this.membershipId)) {
                roleObjects.push(new OrganizationRole(this.api, this, role))
            }
            return roleObjects
        } catch {
            return false
        }
    }

    /**
     * Get the organization that this membership is for
     * @returns {Promise<false|Organization>}
     */
    async getOrganization() {
        try {
            return new Organization(this.api,await this.api.organizationInfo(this.organizationId))
        } catch {
            return false
        }
    }

    /**
     * Remove this membership from the organization
     * @returns {Promise<boolean>}
     */
    async remove() {
        try {
            const response = await this.api.memberDelete(this.organizationId, this.membershipId)
            return response.success
        } catch {
            return false
        }
    }
}

