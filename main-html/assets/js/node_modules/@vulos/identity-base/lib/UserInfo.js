export class UserInfo {
    /**
     * Some information about the user
     * @param response {any}
     */
    constructor(response) {
        this.response = response
    }

    /**
     * Get the user's profile picture.
     * @returns {string}
     */
    picture() {
        return this.response['picture'];
    }

    /**
     * Get the user's Ethereum wallet addresses
     * @returns {string[]}
     */
    wallets() {
        const wallets = this.response['wallet_address'];
        if (wallets) {
            if (Array.isArray(wallets)) {
                return wallets;
            } else {
                return [wallets];
            }
        } else {
            return [];
        }
    }

    /**
     * Get the ID of the user
     * @returns {string}
     */
    id() {
        return this.sub()
    }

    /**
     * Get the ID of the user
     * @returns {string}
     */
    sub() {
        return this.response['sub']
    }

    /**
     * Get the first name of the user
     * @returns {string}
     */
    firstName() {
        return this.response['given_name']
    }

    /**
     * Get the last name of the user
     * @returns {string}
     */
    lastName() {
        return this.response['family_name']
    }

    /**
     * Get the birthdate of the user
     * @returns {Date}
     */
    birthDate() {
        return new Date(this.response['birthdate'])
    }

    /**
     * Get the national ID of the user
     * @returns {string}
     */
    nationalId() {
        return this.response['national_id']
    }

    /**
     * Get the trust level of the user
     * @returns {number}
     */
    trustLevel() {
        return parseInt(this.response['trust_level'])
    }

    /**
     * Check if the user is verified
     * @returns {boolean}
     */
    isEmailVerified() {
        return this.response['email_verified']
    }

    /**
     * Check if the user is KYC verified
     * @returns {boolean}
     */
    isKycVerified() {
        return this.response['kyc_verified']
    }

    /**
     * Get the address object of the user
     * @returns {any}
     */
    address() {
        return JSON.parse(this.response['address'])
    }

    /**
     * Get the email of the user
     * @returns {string}
     */
    email() {
        return this.response['email']
    }

    /**
     * Check if the user has a role
     * @param role {string}
     * @returns {boolean}
     */
    hasRole(role) {
        const roles = this.response['organization:role']
        if (Array.isArray(roles)) {
            return roles.includes(role)
        }
        return roles === role
    }

    /**
     * Check if the user is in an organization by name
     * @param name {string}
     * @returns {boolean}
     */
    isInOrganizationWithName(name) {
        const names = this.response['organization:name']
        if (Array.isArray(names)) {
            return names.includes(name)
        }
        return names === name
    }

    /**
     * Check if the user is in an organization by organization id
     * @param id {number}
     * @returns {boolean}
     */
    isInOrganizationWithId(id) {
        const ids = this.response['organization:id']
        if (Array.isArray(ids)) {
            return ids.includes(id.toString())
        }
        return parseInt(ids) === id
    }
}
