import { UserInfo } from "./UserInfo.js";
import { OrganizationApi } from "./organization/OrganizationApi.js"
import { OrganizationMembership } from "./organization/OrganizationMembership.js"
import { BaseAuth } from "./BaseAuth.js";
import { ProfileApi } from "./profile/ProfileApi.js"
import { UserReference } from "./profile/UserReference.js";

export class User {
    /**
     * A Vulos Identity user object that you can use to interact with the API
     * @param api {BaseAuth}
     * @param tokens {{accessToken: string, refreshToken: string, idToken: string, tokenType: string, expiresAt: number}}
     */
    constructor(api,tokens) {
        this.api = api
        this.accessToken = tokens.accessToken
        this.refreshToken = tokens.refreshToken
        this.idToken = tokens.idToken
        this.tokenType = tokens.tokenType
        this.expiresAt = tokens.expiresAt
        this.organizationApi =  new OrganizationApi(this, this.api.endpoint)
        this.profileApi = new ProfileApi(this, this.api.endpoint)
    }

    /**
     * Save the User's tokens to a normal object
     * @returns {{accessToken: string, refreshToken: string, idToken: string, tokenType: string, expiresAt: number}}
     */
    save() {
        return { tokenType: this.tokenType, accessToken: this.accessToken, refreshToken: this.refreshToken, expiresAt: this.expiresAt, idToken: this.idToken }
    }

    /**
     * Get a reference to the current user
     * @return {Promise<UserReference>}
     */
    async reference() {
        const info = await this.info()
        return new UserReference(info.sub(), this.profileApi)
    }

    /**
     * Search for an organization
     * @param search {string}
     * @param amount {number?}
     * @param offset {number?}
     * @return {Promise<{id: number, name: string, address?: string, city?: string, country?: string, state?: string, website?: string, verified?: boolean, uniqueId?: string, zipCode?: string}[]|false>}
     */
    async organizationSearch(search, amount, offset) {
        try {
            return await this.profileApi.organizationSearch(search, amount, offset)
        } catch {
            return false
        }
    }
    /**
     * Get user information
     * @returns {Promise<UserInfo|false>}
     */
    async info() {
        try {
            return await this.api.getUserInfo(await this.getAccessToken())
        } catch {
            return false
        }
    }

    /**
     * Get the organization memberships of the user
     * @returns {Promise<false|OrganizationMembership[]>}
     */
    async getOrganizationMemberships() {
        try {
            const organizationObjects = []
            const organizations = await this.organizationApi.organizationList()
            for (const organization of organizations) {
                organizationObjects.push(new OrganizationMembership(this.organizationApi, organization))
            }
            return organizationObjects
        } catch {
            return false
        }
    }

    /***
     * Create a new organization
     * @param details {{name:string, website:string, address:string, uniqueId:string, taxNumber:string, city:string, countryCode:string, zipCode:string, state?:string}}
     * @returns {Promise<OrganizationMembership|boolean>}
     */
    async createOrganization(details) {
        try {
            const membership = await this.organizationApi.organizationCreate(details)
            return new OrganizationMembership(this.organizationApi, membership)
        } catch {
            return false
        }
    }

    /**
     * Get the access token of this user
     * @returns {Promise<string>|false}
     */
    async getAccessToken() {
        const current = Math.round((new Date()). getTime() / 1000)
        if (this.expiresAt !== undefined) {
            if (current > this.expiresAt) {
                const response = await this.api.refreshTokens(this.refreshToken);
                if (response.access_token) {
                    this.accessToken = response.access_token
                }
                if (response.refresh_token) {
                    this.refreshToken = response.refresh_token
                }
                if (response.id_token) {
                    this.idToken = response.id_token
                }
                if (response.token_type) {
                    this.tokenType = response.token_type
                }
                if (response.expires_at) {
                    this.expiresAt = response.expires_at
                }
            }
        }
        return this.accessToken;
    }
}
