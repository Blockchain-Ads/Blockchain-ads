import { BaseApi } from "../BaseApi.js";
import { User } from "../User.js";
import { invalidate, escapePolicyPart } from "../Cache.js";

export class OrganizationApi extends BaseApi {
    /**
     * The Organization API
     * @param user { User }
     * @param endpoint { string }
     */
    constructor(user, endpoint) {
        super(user, endpoint + '/api/v1/organization');
    }

    /**
     * Get a list of all the organizations
     * @returns {Promise<{organizationId: number, membershipId: string, userId: string}[]>}
     */
    async organizationList() {
        return await this.request("list", "get", null, "organization:list");
    }

    /**
     * Get information about a specific organization
     * @param id {number}
     * @returns {Promise<{memberships: {organizationId: number, membershipId: string, userId: string}[],id: number, name:string, website:string, address:string, uniqueId?:string, taxNumber:string, city:string, country:{ alpha2: string, name: string }, zipCode:string, state:string, verified:boolean}>}
     */
    async organizationInfo(id) {
        return await this.request(`${id}`, "get", null, "organization:info")
    }

    /**
     * Update an organization's details
     * @param id {number}
     * @param details {{name?:string, website?:string, address?:string, uniqueId?:string, taxNumber?:string, city?:string, countryCode?:string, zipCode?:string, state?:string}}
     * @returns {Promise<{success: boolean, message: string}>}
     */
    async organizationUpdate(id, details) {
        const response = await this.request(`${id}/update`, 'put', details, "organization:update")
        if (response.success) {
            invalidate(new RegExp(escapePolicyPart(id)))
        }
        return response
    }

    /**
     * Delete an organization
     * @param id {number}
     * @returns {Promise<{success: boolean, message: string}>}
     */
    async organizationDelete(id) {
        const response = await this.request(`${id}/delete`, 'delete', null, "organization:delete")
        if (response.success) {
            invalidate(new RegExp(escapePolicyPart(id)))
            invalidate(/^organization:list/)
        }
        return response
    }

    /**
     * Create a new organization
     * @param details {{name:string, website:string, address:string, uniqueId:string, taxNumber:string, city:string, countryCode:string, zipCode:string, state?:string}}
     * @returns {Promise<{organizationId: number, membershipId: string, userId: string}>}
     */
    async organizationCreate(details) {
        const response = await this.request(`create`, 'put', details, "organization:create")
        if (response.success) {
            invalidate(/^organization:list/)
        }
        return response
    }

    /**
     * Get information about a specific member
     * @param id {number}
     * @param member {string}
     * @returns {Promise<{roles: {name: string, id: string}[], firstName: string, lastName: string, email:string, organizationId: number, membershipId: string, userId: string}>}
     */
    async memberInfo(id, member) {
        return await this.request(`${id}/${member}`, 'get', null, "organization:member:info")
    }

    /**
     * Delete a member from an organization
     * @param id {number}
     * @param member {string}
     * @returns {Promise<{success: boolean, message: string}>}
     */
    async memberDelete(id, member) {
        const response = await this.request(`${id}/${member}/delete`, 'delete', null, "organization:member:delete")
        if (response.success) {
            invalidate(new RegExp(escapePolicyPart(id)))
        }
        return response
    }

    /**
     * Invite a member to an organization
     * @param id {number}
     * @param email {string}
     * @returns {Promise<{success: boolean, message: string}>}
     */
    async memberInvite(id, email) {
        return await this.request(`${id}/invite/${encodeURIComponent(email)}`, 'put', null, "organization:member:invite")
    }

    /**
     * List a member's roles
     * @param id {number}
     * @param member {string}
     * @returns {Promise<{name: string, id: string}[]>}
     */
    async roleList(id, member) {
        return await this.request(`${id}/${member}/role/list`, 'get', null, "organization:role:list")
    }

    /**
     * Create a role for a member
     * @param id {number}
     * @param member {string}
     * @param name {string}
     * @returns {Promise<{id: string, name:string}>}
     */
    async roleCreate(id, member, name) {
        const response = await this.request(`${id}/${member}/role/create`, 'put', { name }, "organization:role:create")
        if (response) {
            invalidate(new RegExp(escapePolicyPart(member)))
        }
        return response
    }

    /**
     * Remove a role for a member
     * @param id {number}
     * @param member {string}
     * @param role {string}
     * @returns {Promise<{success: boolean, message: string}>}
     */
    async roleDelete(id, member, role) {
        const response = await this.request(`${id}/${member}/role/${role}/delete`, 'delete', null, "organization:role:delete")
        if (response.success) {
            invalidate(new RegExp(escapePolicyPart(member)))
        }
        return response
    }
}