import {OrganizationApi} from "./OrganizationApi.js";
import {OrganizationMembership} from "./OrganizationMembership.js";

export class Organization {
    /**
     * An object that contains data related to a Vulos Identity Organization
     * @param api {OrganizationApi}
     * @param organization {{memberships: {organizationId: number, membershipId: string, userId: string}[],id: number, created: number, name:string, website:string, address:string, uniqueId?:string, taxNumber:string, city:string, country:{ alpha2: string, name: string }, zipCode:string, state:string, verified:boolean}}
     */
    constructor(api, organization) {
        this.api = api
        this.memberships = []
        for (const membership of organization.memberships) {
            this.memberships.push(new OrganizationMembership(api, membership))
        }
        this.created = new Date(organization.created * 1000)
        this.id = organization.id
        this.name = organization.name
        this.website = organization.website
        this.address = organization.address
        this.uniqueId = organization.uniqueId
        this.taxNumber = organization.taxNumber
        this.city = organization.city
        this.state = organization.state
        this.verified = organization.verified
        this.zipCode = organization.zipCode
        this.country = organization.country
    }

    /**
     * Update this organization's details
     * @param details {{name?:string, website?:string, address?:string, uniqueId?:string, taxNumber?:string, city?:string, countryCode?:string, zipCode?:string, state?:string}}
     * @returns {Promise<boolean>}
     */
    async update(details) {
        try {
            const response = await this.api.organizationUpdate(this.id, details)
            return response.success
        } catch {
            return false
        }
    }

    /**
     * Invite someone to this organization
     * @param email {string}
     * @returns {Promise<boolean>}
     */
    async invite(email) {
        try {
            const response = await this.api.memberInvite(this.id, email)
            return response.success
        } catch {
            return false
        }
    }
    /**
     * Remove this organization
     * @returns {Promise<boolean>}
     */
    async remove() {
        try {
            const response = await this.api.organizationDelete(this.id)
            return response.success
        } catch {
            return false
        }
    }


}