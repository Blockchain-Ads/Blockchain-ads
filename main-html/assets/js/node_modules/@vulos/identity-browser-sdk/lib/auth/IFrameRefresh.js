import {StateVerifier} from "./StateVerifier.js";

export default async function(refreshToken) {
    if (refreshToken) {
        console.warn('Refreshing using a refresh token using the browser isn\'t supported, will fallback to online refresh')
    }

    const verifier = new StateVerifier()
    localStorage.setItem('silent_verifier', JSON.stringify(verifier))

    const promise = new Promise((resolve,reject) => window.addEventListener('message',
        function messageHandler(ev) {
            if (ev.data && ev.data.accessToken) {
                window.removeEventListener('message', messageHandler)
                resolve(ev.data)
            }
            if (ev.data && ev.data.fail) {
                window.removeEventListener('message', messageHandler)
                reject()
            }
        }));
    const iframe = document.createElement('iframe')
    iframe.src = await this.createAuthUrl(verifier)
    iframe.height = '0'
    iframe.width = '0'
    iframe.style.display = 'none'
    iframe.addEventListener('load', ev => {
        try {
            const [frame] = ev.path
            if (!frame.contentDocument) {
                this.createAuthUrl(verifier).then(location => {
                    document.location = location
                })
            }
        } catch {
            this.createAuthUrl(verifier).then(location => {
                document.location = location
            })
        }
    })
    document.body.append(iframe)
    window.silentIframe = iframe
    try {
        const tokenSet = await promise
        return {
            access_token: tokenSet.accessToken,
            refresh_token: tokenSet.refreshToken,
            id_token: tokenSet.idToken,
            token_type: tokenSet.tokenType,
            expires_at: tokenSet.expiresAt
        }
    } catch {
        document.location = await this.createAuthUrl(verifier)
    } finally {
        document.body.removeChild(iframe)
    }
}